// Code generated by moshi-kotlin-codegen. Do not edit.
package son.ysy.useful.dependencies.model.group

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import kotlin.String

@Suppress(
    "DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION", "RedundantExplicitType",
    "LocalVariableName"
)
class GroupChildModuleJsonAdapter(
    moshi: Moshi
) : JsonAdapter<GroupChildModule>() {
    private val options: JsonReader.Options = JsonReader.Options.of(
        "name", "version", "link",
        "group", "remark", "module"
    )

    private val stringAdapter: JsonAdapter<String> = moshi.adapter(
        String::class.java, emptySet(),
        "name"
    )

    private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(
        String::class.java,
        emptySet(), "version"
    )

    override fun toString(): String = buildString(38) {
        append("GeneratedJsonAdapter(").append("GroupChildModule").append(')')
    }

    override fun fromJson(reader: JsonReader): GroupChildModule {
        var name: String? = null
        var version: String? = null
        var link: String? = null
        var group: String? = null
        var remark: String? = null
        var module: String? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "name", "name",
                    reader
                )
                1 -> version = nullableStringAdapter.fromJson(reader)
                2 -> link = nullableStringAdapter.fromJson(reader)
                3 -> group = nullableStringAdapter.fromJson(reader)
                4 -> remark = nullableStringAdapter.fromJson(reader)
                5 -> module = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "module",
                    "module", reader
                )
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        return GroupChildModule(
            name = name ?: throw Util.missingProperty("name", "name", reader),
            version = version,
            link = link,
            group = group,
            remark = remark,
            module = module ?: throw Util.missingProperty("module", "module", reader)
        )
    }

    override fun toJson(writer: JsonWriter, value: GroupChildModule?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("name")
        stringAdapter.toJson(writer, value.name)
        writer.name("version")
        nullableStringAdapter.toJson(writer, value.version)
        writer.name("link")
        nullableStringAdapter.toJson(writer, value.link)
        writer.name("group")
        nullableStringAdapter.toJson(writer, value.group)
        writer.name("remark")
        nullableStringAdapter.toJson(writer, value.remark)
        writer.name("module")
        stringAdapter.toJson(writer, value.module)
        writer.endObject()
    }
}
