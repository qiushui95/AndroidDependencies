// Code generated by moshi-kotlin-codegen. Do not edit.
package son.ysy.useful.dependencies.model.group

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION", "RedundantExplicitType",
    "LocalVariableName")
class GroupDependencyJsonAdapter(
  moshi: Moshi
) : JsonAdapter<GroupDependency>() {
  private val options: JsonReader.Options = JsonReader.Options.of("name", "version", "link",
      "group", "remark", "modules")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "link")

  private val listOfGroupChildModuleAdapter: JsonAdapter<List<GroupChildModule>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, GroupChildModule::class.java),
      emptySet(), "modules")

  override fun toString(): String = buildString(37) {
      append("GeneratedJsonAdapter(").append("GroupDependency").append(')') }

  override fun fromJson(reader: JsonReader): GroupDependency {
    var name: String? = null
    var version: String? = null
    var link: String? = null
    var group: String? = null
    var remark: String? = null
    var modules: List<GroupChildModule>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        1 -> version = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("version",
            "version", reader)
        2 -> link = nullableStringAdapter.fromJson(reader)
        3 -> group = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("group", "group",
            reader)
        4 -> remark = nullableStringAdapter.fromJson(reader)
        5 -> modules = listOfGroupChildModuleAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("modules", "modules", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return GroupDependency(
        name = name ?: throw Util.missingProperty("name", "name", reader),
        version = version ?: throw Util.missingProperty("version", "version", reader),
        link = link,
        group = group ?: throw Util.missingProperty("group", "group", reader),
        remark = remark,
        modules = modules ?: throw Util.missingProperty("modules", "modules", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: GroupDependency?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("name")
    stringAdapter.toJson(writer, value.name)
    writer.name("version")
    stringAdapter.toJson(writer, value.version)
    writer.name("link")
    nullableStringAdapter.toJson(writer, value.link)
    writer.name("group")
    stringAdapter.toJson(writer, value.group)
    writer.name("remark")
    nullableStringAdapter.toJson(writer, value.remark)
    writer.name("modules")
    listOfGroupChildModuleAdapter.toJson(writer, value.modules)
    writer.endObject()
  }
}
